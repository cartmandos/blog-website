---
import { ClientRouter } from "astro:transitions";

interface Props {
  pageName: string;
  projectName?: string;
  currentPath: string;
}

const {
  pageName,
  projectName = "Oren Damien Shomrai",
  currentPath,
} = Astro.props;
---

<ClientRouter />
<header class="vscode-header">
  <div class="header-content">
    <!-- Home (Logo Icon) -->
    <button
      class="icon-button"
      aria-label="Logo"
      title="Logo"
      onclick="location.href = '/'"
    >
      <img src="/favicon.svg" alt="Logo" width="18" height="18" />
    </button>


    <div class="center-group">
      <!-- Navigation -->
      <div class="nav-buttons">
        <button id="nav-back" class="icon-button" aria-label="Go back" disabled>
          <i class="ph ph-caret-left"></i>
        </button>
        <button
          id="nav-forward"
          class="icon-button"
          aria-label="Go forward"
          disabled
        >
          <i class="ph ph-caret-right"></i>
        </button>
      </div>

      <!-- Command Center -->
      <button class="command-center">
        <i class="ph ph-magnifying-glass search-icon"></i>
        <span class="command-text">
          {pageName} [{projectName}]
        </span>
      </button>

      <!-- External Links -->
      <div class="external-links">
        <a
          href="https://github.com/username"
          target="_blank"
          rel="noopener noreferrer"
          class="icon-button tooltip-container"
          aria-label="GitHub Profile"
        >
          <i class="ph ph-github-logo"></i>
          <div class="tooltip">GitHub</div>
        </a>
        <a
          href="https://linkedin.com/in/username"
          target="_blank"
          rel="noopener noreferrer"
          class="icon-button tooltip-container"
          aria-label="LinkedIn Profile"
        >
          <i class="ph ph-linkedin-logo"></i>
          <div class="tooltip">LinkedIn</div>
        </a>
      </div>
    </div>

    <!-- Theme Toggle -->
    <div class="theme-toggle tooltip-container">
      <button
        id="theme-toggle-btn"
        class="icon-button"
        aria-label="Toggle color theme"
      >
        <i class="ph ph-moon"></i>
      </button>
      <div class="tooltip">Color Theme</div>

      <div class="theme-dropdown">
        <button class="theme-option" data-theme="dark">
          <i class="ph ph-moon"></i>
          <span>Dark (Visual Studio)</span>
          <i class="ph ph-check check-icon"></i>
        </button>
        <button class="theme-option" data-theme="light">
          <i class="ph ph-sun"></i>
          <span>Light (Visual Studio)</span>
          <i class="ph ph-check check-icon"></i>
        </button>
      </div>
    </div>
  </div>
</header>

<!-- Add Phosphor Icons web font in the head of your Layout component -->
<Fragment slot="head">
  <link
    rel="stylesheet"
    href="https://unpkg.com/@phosphor-icons/web@2.0.3/src/regular/style.css"
  />
</Fragment>

<script>
  // Theme definitions
  // Add this to your existing script
  function initializeThemeToggle() {
    const themeToggle = document.getElementById("theme-toggle-btn");
    const themeDropdown = document.querySelector(".theme-dropdown");
    const themeOptions = document.querySelectorAll(".theme-option");

    // Get initial theme
    const currentTheme = localStorage.getItem("theme") || "dark";
    document.documentElement.classList.toggle(
      "light",
      currentTheme === "light",
    );
    updateThemeUI(currentTheme);

    // Toggle dropdown
    themeToggle?.addEventListener("click", (e) => {
      e.stopPropagation();
      themeDropdown?.classList.toggle("show");
    });

    // Handle theme selection
    themeOptions.forEach((option) => {
      option.addEventListener("click", () => {
        const newTheme = option.getAttribute("data-theme") || "dark";
        localStorage.setItem("theme", newTheme);
        document.documentElement.classList.toggle(
          "light",
          newTheme === "light",
        );
        updateThemeUI(newTheme);
        themeDropdown?.classList.remove("show");
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", () => {
      themeDropdown?.classList.remove("show");
    });

    function updateThemeUI(theme: string) {
      // Update toggle button icon
      const toggleIcon = themeToggle?.querySelector("i");
      if (toggleIcon) {
        toggleIcon.className = theme === "light" ? "ph ph-sun" : "ph ph-moon";
      }

      // Update checkmarks
      themeOptions.forEach((option) => {
        const checkIcon = option.querySelector(".check-icon");
        if (checkIcon) {
          // checkIcon.style.opacity =
          //   option.getAttribute('data-theme') === theme ? '1' : '0';
          checkIcon.classList.toggle(
            "visible",
            option.getAttribute("data-theme") === theme,
          );
        }
      });
    }
  }

  // Initialize on page load and navigation
  document.addEventListener("astro:page-load", initializeThemeToggle);

  //////////////////////////////////////////

  // Navigation history handling with proper type assertions
  const backBtn = document.getElementById(
    "nav-back",
  ) as HTMLButtonElement | null;
  const forwardBtn = document.getElementById(
    "nav-forward",
  ) as HTMLButtonElement | null;

  function updateNavButtons() {
    if (backBtn && forwardBtn) {
      // Check if we can go back/forward in history
      backBtn.disabled = !history.state?.back;
      forwardBtn.disabled = !history.state?.forward;
    }
  }

  document.addEventListener("astro:page-load", () => {
    updateNavButtons();
  });

  backBtn?.addEventListener("click", () => {
    history.back();
  });

  forwardBtn?.addEventListener("click", () => {
    history.forward();
  });
</script>

<style>
  .vscode-header {
    background-color: var(--vscode-bg);
    border-bottom: 1px solid var(--vscode-border);
    height: var(--header-height);
    width: 100%;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
  }

  .center-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0 auto;
  }

  .header-content {
    max-width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 0.5rem;
    gap: 0.5rem;
  }

  .icon-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 4px;
    border: none;
    background: transparent;
    color: var(--vscode-fg);
    cursor: pointer;
    padding: 0;
    transition: background-color 0.2s;
  }

  .icon-button:hover {
    background-color: var(--vscode-hover-bg);
  }

  .icon-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .icon-button i {
    font-size: 18px;
  }

  .nav-buttons {
    display: flex;
    gap: 2px;
  }

  .command-center {
    margin: 0 auto;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--vscode-hover-bg);
    border: 1px solid var(--vscode-border);
    border-radius: 4px;
    padding: 0 0.75rem;
    height: 28px;
    color: var(--vscode-fg);
    font-size: 0.85rem;
    cursor: pointer;
    transition: background-color 0.2s;
    min-width: 300px;
  }

  .command-center:hover {
    background-color: var(--vscode-active-bg);
  }

  .search-icon {
    opacity: 0.8;
    font-size: 16px;
  }

  .command-text {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .external-links {
    display: flex;
    gap: 0.25rem;
    margin-left: auto;
  }

  .tooltip-container {
    position: relative;
  }

  .tooltip {
    position: absolute;
    top: calc(100% + 5px);
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--vscode-tooltip-bg);
    color: var(--vscode-fg);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s;
    pointer-events: none;
    border: 1px solid var(--vscode-border);
  }

  .tooltip-container:hover .tooltip {
    opacity: 1;
    visibility: visible;
  }

  .theme-toggle {
    position: relative;
  }

  .theme-dropdown {
    position: absolute;
    top: calc(100% + 5px);
    right: 0;
    background-color: var(--vscode-bg);
    border: 1px solid var(--vscode-border);
    border-radius: 4px;
    width: 200px;
    display: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    z-index: 1000;
  }

  .theme-dropdown.show {
    display: block;
  }

  .theme-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    width: 100%;
    padding: 0.5rem;
    border: none;
    background: transparent;
    color: var(--vscode-fg);
    cursor: pointer;
    font-size: 0.85rem;
  }

  .theme-option:hover {
    background-color: var(--vscode-hover-bg);
  }

  .theme-option .check-icon {
    margin-left: auto;
    opacity: 0;
  }

  .check-icon {
    opacity: 0;
  }

  .check-icon.visible {
    opacity: 1;
  }

</style>
