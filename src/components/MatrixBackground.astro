<canvas
  id="matrix-canvas"
  class="fixed inset-0 w-full h-full pointer-events-none opacity-20 transition-opacity duration-300"
  data-testid="matrix-background"
>
</canvas>

<script>
  class MatrixAnimation {
    private canvas: HTMLCanvasElement;
    private context: CanvasRenderingContext2D;
    private symbolSize: number = 14;
    private fps: number = 30;
    private drops: number[] = [];
    private animationFrameId: number = 0;

    constructor(canvasElement: HTMLCanvasElement) {
      this.canvas = canvasElement;
      const ctx = this.canvas.getContext("2d");
      if (!ctx) throw new Error("Could not get canvas context");
      this.context = ctx;
      this.init();
    }

    private init(): void {
      this.resizeCanvas();
      window.addEventListener("resize", () => this.resizeCanvas());
      this.startAnimation();
    }

    private resizeCanvas(): void {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      const columns = Math.ceil(this.canvas.width / this.symbolSize);
      this.drops = Array(columns).fill(1);
    }

    private draw(): void {
      this.context.fillStyle = "rgba(0, 0, 0, 0.05)";
      this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);

      this.context.fillStyle = "#0F0";
      this.context.font = `${this.symbolSize}px monospace`;

      for (let i = 0; i < this.drops.length; i++) {
        const char = String.fromCharCode(0x30a0 + Math.random() * 96);
        this.context.fillText(
          char,
          i * this.symbolSize,
          this.drops[i] * this.symbolSize,
        );

        if (
          this.drops[i] * this.symbolSize > this.canvas.height &&
          Math.random() > 0.975
        ) {
          this.drops[i] = 0;
        }
        this.drops[i]++;
      }
    }

    public startAnimation(): void {
      const animate = () => {
        this.draw();
        this.animationFrameId = setTimeout(() => {
          requestAnimationFrame(animate);
        }, 1000 / this.fps);
      };
      animate();
    }

    public stopAnimation(): void {
      clearTimeout(this.animationFrameId);
    }

    public setOpacity(value: number): void {
      this.canvas.style.opacity = value.toString();
    }
  }

  // Initialize the animation when the document is ready
  document.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById(
      "matrix-canvas",
    ) as HTMLCanvasElement;
    if (canvas) {
      const matrixAnimation = new MatrixAnimation(canvas);

      // Expose the animation instance to window for external control
      (window as any).matrixAnimation = matrixAnimation;
    }
  });
</script>
