---
import { getEntry } from 'astro:content';
import EditorMode from "./EditorMode.astro"
import PreviewMode from "./PreviewMode.astro"
import ModeToggle from "./ModeToggle.astro"
import Breadcrumbs from "../Breadcrumbs.astro"
import type { ViewMode } from "@/types"

// interface Props extends PageProps {}
interface PageProps {
  id: string
  title?: string
  initialMode?: ViewMode
}

interface Props extends PageProps {}

const { id, title = "Untitled", initialMode = "preview" } = Astro.props


const currentPath = "home/about.md" // Astro.url.pathname
const pageId = crypto.randomUUID()
---

<article class="page" data-page-id={pageId}>
  <div class="page-header">
    <!-- <h1 class="page-title">{title}</h1> -->
    <div class="tab-container">
      <div class="page-title">
        <span class="title-text">{title}</span>
        <button class="close-button" aria-label="Close page">
          <i class="ph ph-x"></i>
        </button>
      </div>
    </div>
    <ModeToggle pageId={pageId} mode={initialMode} />
  </div>

  <!-- Breadcrumbs -->
  <div class="page-subheader">
    <Breadcrumbs path={currentPath} />
  </div>

  <div class="page-content" data-current-mode={initialMode}>
    <template id="preview-template">
      <PreviewMode id={id} pageId={pageId} />
    </template>
    <template id="editor-template">
      <EditorMode id={id}  pageId={pageId} />
    </template>


    <div class="preview-container" hidden={initialMode !== "preview"}>
      <PreviewMode id={id} pageId={pageId} />
    </div>
    <div class="editor-container" hidden={initialMode !== "editor"}>
      <EditorMode id={id}  pageId={pageId} />
    </div>
  </div>
</article>

<script>
  import type { ViewMode } from "@/types"

  function initializePage(pageElement: Element) {
    const pageId = pageElement.getAttribute("data-page-id")!

    // Handle mode changes
    pageElement.addEventListener("modeChange", ((e: CustomEvent) => {
      switchMode(pageElement, e.detail.mode)
    }) as EventListener)

    // Handle close button
    const closeButton = pageElement.querySelector(".close-button")
    closeButton?.addEventListener("click", () => {
      pageElement.remove()
    })
  }

  function switchMode(pageElement: Element, mode: ViewMode) {
    const contentElem = pageElement.querySelector(".page-content")
    contentElem?.setAttribute("data-current-mode", mode)

    const editorElem = pageElement?.querySelector(".editor-container")
    const previewElem = pageElement?.querySelector(".preview-container")

    if (editorElem && previewElem) {
      // editorElem.toggleAttribute("hidden");
      // previewElem.toggleAttribute("hidden");
      switch (mode) {
        case "editor":
          editorElem.removeAttribute("hidden")
          previewElem.setAttribute("hidden", "")
          break
        case "preview":
          editorElem.setAttribute("hidden", "")
          previewElem.removeAttribute("hidden")
          break
        default:
          break
      }
    }
  }

  // Initialize on page load
  document.querySelectorAll(".page").forEach(initializePage)
</script>

<style>
  .page {
    display: flex;
    flex-direction: column;
    height: 100%;
    background-color: var(--vscode-bg);
    color: var(--vscode-fg);
    border-bottom: 1px solid var(--vscode-border);
  }

  .page-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #181818;
    /* padding: 0.5rem 1rem; */
    border-bottom: 1px solid var(--vscode-border);
  }

  .page-subheader {
    background-color: var(--vscode-bg);
    padding-block: 0.25rem;
  }

  .tab-container {
    height: 100%;
    display: flex;
    align-items: flex-end;
  }

  .page-title {
    font-size: 1rem;
    font-weight: normal;
    margin: 0;
    color: var(--vscode-fg);
    /* opacity: 0.8; */
    height: 100%;
    background: var(--vscode-bg);

    padding: 0.5rem 1rem;
    border-right: 1px solid var(--vscode-border);
    border-top: 2px solid green;
    border-bottom: 2px solid var(--vscode-bg);
    margin-bottom: -1px;
  }

  .close-button {
    /* display: flex; */
    align-items: center;
    justify-content: center;
    padding: 2px;
    border: none;
    background: none;
    color: var(--vscode-fg);
    opacity: 0.6;
    cursor: pointer;
    border-radius: 3px;
  }

  .close-button:hover {
    opacity: 1;
    background-color: var(--vscode-hover-bg);
  }

  .page-content {
    flex: 1;
    overflow: hidden;
  }

  .editor-container,
  .preview-container {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
  }

  [hidden] {
    display: none !important;
  }
</style>
