---
import { marked } from "marked"

interface Props {
  content: string
  pageId: string
}

const { content, pageId } = Astro.props

// Configure marked options
marked.setOptions({
  gfm: true,
  breaks: true,
})

// Initial server-side markdown processing
const rawHtmlContent = marked.parse(content)
---

<div class={`preview-mode`} data-page-id={pageId}>
  <div class="preview-content" data-raw-content={rawHtmlContent}>
    <!-- Content will be inserted here -->
  </div>
</div>

<script>
  import DOMPurify from "dompurify"

  function initializePreview() {
    const previewContents = document.querySelectorAll(".preview-content")

    const santizeCfg = {
      USE_PROFILES: { html: true },
      ALLOWED_TAGS: [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "p",
        "a",
        "img",
        "ul",
        "ol",
        "li",
        "blockquote",
        "code",
        "pre",
        "hr",
        "table",
        "thead",
        "tbody",
        "tr",
        "th",
        "td",
        "strong",
        "em",
        "del",
        "br",
      ],
      ALLOWED_ATTR: [
        "href",
        "src",
        "alt",
        "title",
        "class",
        "id",
        "name",
        "target",
        "rel",
      ],
    }

    previewContents.forEach((container) => {
      const rawContent = container.getAttribute("data-raw-content")
      if (rawContent) {
        // Sanitize and insert content
        const sanitizedContent = DOMPurify.sanitize(rawContent, santizeCfg)

        container.innerHTML = sanitizedContent
        container.removeAttribute("data-raw-content")
      }
    })
  }

  // Initialize on page load and navigation
  document.addEventListener("astro:page-load", initializePreview)
</script>

<style>
  .preview-mode {
    padding: 2rem;
    line-height: 1.6;
  }

  .preview-content {
    max-width: 800px;
    margin: 0 auto;
  }

  /* Markdown styling */
  .preview-content :global(h1),
  .preview-content :global(h2),
  .preview-content :global(h3),
  .preview-content :global(h4),
  .preview-content :global(h5),
  .preview-content :global(h6) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    line-height: 1.25;
    color: var(--vscode-fg);
  }

  .preview-content :global(h1) {
    font-size: 2em;
    border-bottom: 1px solid var(--vscode-border);
    padding-bottom: 0.3em;
  }

  .preview-content :global(h2) {
    font-size: 1.5em;
    border-bottom: 1px solid var(--vscode-border);
    padding-bottom: 0.3em;
  }

  .preview-content :global(p) {
    margin: 1em 0;
  }

  .preview-content :global(ul),
  .preview-content :global(ol) {
    margin: 1em 0;
    padding-left: 2em;
  }

  .preview-content :global(li) {
    margin: 0.5em 0;
  }

  .preview-content :global(blockquote) {
    margin: 1em 0;
    padding-left: 1em;
    border-left: 0.25em solid var(--vscode-border);
    color: var(--vscode-dim);
  }

  .preview-content :global(code) {
    padding: 0.2em 0.4em;
    background: var(--vscode-hover-bg);
    border-radius: 3px;
    font-family: var(--font-mono);
    font-size: 0.9em;
  }

  .preview-content :global(pre code) {
    display: block;
    padding: 1em;
    overflow-x: auto;
    line-height: 1.45;
  }

  .preview-content :global(table) {
    width: 100%;
    margin: 1em 0;
    border-collapse: collapse;
  }

  .preview-content :global(th),
  .preview-content :global(td) {
    padding: 0.5em;
    border: 1px solid var(--vscode-border);
  }

  .preview-content :global(th) {
    background: var(--vscode-hover-bg);
  }

  .preview-content :global(a) {
    color: var(--vscode-link);
    text-decoration: none;
  }

  .preview-content :global(a:hover) {
    text-decoration: underline;
  }

  .preview-content :global(img) {
    max-width: 100%;
    height: auto;
  }

  .preview-content :global(hr) {
    height: 1px;
    border: none;
    background: var(--vscode-border);
    margin: 2em 0;
  }
</style>
