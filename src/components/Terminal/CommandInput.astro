---
// CommandInput.astro
interface Props {
  prompt?: string
}

const { prompt = "guest@portfolio:~$" } = Astro.props
---

<div class="command-input" id="commandInput">
  <label for="stdin" class="prompt">{prompt}</label>
  <div class="input-container">
    <input
      class="command-text"
      id="stdin"
      type="text"
      autocomplete="off"
      spellcheck="false"
      autocapitalize="off"
      autocorrect="off"
      value=""
      style="width: 0.25ch"
    />
    <span class="completion-preview"></span>
    <span class="cursor"></span>
  </div>
</div>

<script>
  import { COMMANDS, fileSystem } from "../../utils/filesystem"

  interface CompletionContext {
    currentPath: string
    input: string
    pathParts: string[]
    lastPart: string
    isPath: boolean
  }

  class AutoComplete {
    private input: HTMLInputElement
    private preview: HTMLElement
    private completions: string[] = []
    private completionIndex: number = -1

    constructor(inputElement: HTMLInputElement, previewElement: HTMLElement) {
      this.input = inputElement
      this.preview = previewElement
      this.setupEventListeners()
    }

    private setupEventListeners() {
      this.input.addEventListener("input", () => {
        this.handleInput()
        this.updateInputWidth()
      })
      this.input.addEventListener("keydown", (e) => {
        this.handleKeydown(e)
        this.updateInputWidth()
      })
    }

    private getCompletionContext(): CompletionContext {
      const input = this.input.value
      const parts = input.split(" ")
      const lastPart = parts[parts.length - 1]
      const isPath = lastPart.includes("/")
      const pathParts = lastPart.split("/")
      const currentPath = pathParts.slice(0, -1).join("/")

      return {
        currentPath,
        input,
        pathParts,
        lastPart,
        isPath,
      }
    }

    private updateInputWidth() {
      const contentLength = this.input.value.length
      this.input.style.width = `${Math.max(0.25, contentLength)}ch`
    }

    private async handleInput() {
      const context = this.getCompletionContext()

      // Reset completion state
      this.completions = []
      this.completionIndex = -1
      this.preview.textContent = ""

      if (!context.input.trim()) return

      // Get completions based on input type
      if (context.input.indexOf(" ") === -1) {
        // Command completion
        this.completions = Object.keys(COMMANDS).filter((cmd) =>
          cmd.startsWith(context.input),
        )
      } else if (context.isPath) {
        // Path completion
        const path = context.currentPath || "/"
        const files = fileSystem.ls(path)
        const prefix = context.pathParts[context.pathParts.length - 1]

        this.completions = files
          .filter((file) => file.startsWith(prefix))
          .map((file) => {
            const fullPath = `${path}/${file}`.replace(/\/+/g, "/")
            return context.input.slice(0, -context.lastPart.length) + fullPath
          })
      }

      // Show preview if completions available
      if (this.completions.length > 0) {
        this.showCompletion(0, false)
      }
    }

    private handleKeydown(e: KeyboardEvent) {
      if (this.completions.length === 0) return

      switch (e.key) {
        case "Tab":
          e.preventDefault()

          if (e.shiftKey) {
            this.showCompletion(
              (this.completionIndex - 1 + this.completions.length) %
                this.completions.length,
              true,
            )
          } else {
            this.showCompletion(
              (this.completionIndex + 1) % this.completions.length,
              true,
            )
          }
          break

        case "ArrowRight":
          if (this.preview.textContent && e.ctrlKey) {
            e.preventDefault()
            this.acceptCompletion()
          }
          break

        case "Escape":
          this.clearCompletions()
          break
      }
    }

    private showCompletion(index: number, apply: boolean) {
      this.completionIndex = index
      const completion = this.completions[index]

      if (apply) {
        this.input.value = completion
        this.preview.textContent = ""
      } else {
        const preview = completion.slice(this.input.value.length)
        this.preview.textContent = preview
      }
    }

    private acceptCompletion() {
      if (this.completionIndex >= 0) {
        this.input.value = this.completions[this.completionIndex]
        this.clearCompletions()
      }
    }

    private clearCompletions() {
      this.completions = []
      this.completionIndex = -1
      this.preview.textContent = ""
    }
  }

  // Initialize autocompletion
  const input = document.querySelector("#stdin") as HTMLInputElement
  const preview = document.querySelector(".completion-preview") as HTMLElement

  if (input && preview) {
    new AutoComplete(input, preview)
  }
</script>

<style>
  .command-input {
    margin-top: 1rem;
    caret-color: transparent;
  }

  .input-container {
    display: inline-flex;
  }

  .prompt {
    color: var(--terminal-green);
    opacity: 0.9;
    white-space: nowrap;
  }

  .command-text,
  .completion-preview {
    display: inline-block;
    margin: 0;
    padding: 0;
  }

  .command-text {
    background: transparent;
    border: none;
    color: var(--terminal-bright);
    font-family: var(--font-mono);
    font-size: inherit;
    outline: none;
  }

  .completion-preview {
    color: var(--terminal-dim);
    pointer-events: none;
    white-space: pre;
  }

  .cursor {
    display: inline-block;
    width: 0.5em;
    height: 1em;
    background-color: var(--terminal-green);
  }

  .command-input:focus-within .cursor {
    animation: blink 1s step-end infinite;
  }

  @keyframes blink {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }
</style>
