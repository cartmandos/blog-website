---
import CommandInput from "./CommandInput.astro";
import TerminalOutput from "./TerminalOutput.astro";
import ContainerMatrix from "../ContainerMatrix.astro";
// import AsciiArt from "./AsciiArt.astro";
import Neofetch from "./Neofetch.astro";
import { getTimestamp } from "../../utils/time";
import { fileSystem } from "../../utils/filesystem/commands";
// import { getProfileInfo } from "../../utils/profile";

interface Props {
  initialOutput?: {
    command: string;
    output: string[];
  }[];
}

const { initialOutput = [] } = Astro.props;
const terminalId = "terminal-container";
const PS1 = "guest@portfolio";
---

<div class="terminal-window" id="terminal">
  <div class="terminal-header">
    <div class="controls">
      <span class="control close"></span>
      <span class="control minimize"></span>
      <span class="control maximize"></span>
    </div>
    <div class="terminal-title">
      <span class="title">Terminal</span>
      <span class="tab-title">{PS1}</span>
    </div>
  </div>

  <div class="terminal-container" id={terminalId}>
    <ContainerMatrix containerId={terminalId} initialOpacity={0.2} />

    <div class="terminal-content">
      <!-- Neofetch-style terminal header -->
      <Neofetch PS1={PS1} />
      {
        initialOutput.map((entry) => (
          <TerminalOutput
            command={entry.command}
            output={entry.output}
            timestamp={getTimestamp()}
          />
        ))
      }

      <CommandInput prompt={fileSystem.getPrompt()} />
    </div>
  </div>
</div>

<script>
  import { initializeTerminal } from "./terminalClient";

  document.addEventListener("DOMContentLoaded", () => {
    initializeTerminal();
  });
</script>

<style>
  .terminal-window {
    background: var(--terminal-dark);
    /* border: 1px solid #454545; */
    /* border: 1px solid var(--terminal-green); */
    /* box-shadow: 0 0 20px var(--terminal-shadow); */
    /* border-radius: 6px; */
    border-bottom: 1px solid #454545;
    overflow: hidden;
    /* margin-bottom: 2rem; */
  }

  .terminal-header {
    /* background: var(--terminal-header); */
    padding: 0.5rem;
    display: flex;
    align-items: center;
    border-bottom: 1px solid var(--terminal-dim);
    position: relative;
    z-index: 2;
  }

  .controls {
    display: flex;
    gap: 0.5rem;
    margin-right: 1rem;
  }

  .control {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .close {
    background: #ff5f56;
  }
  .minimize {
    background: #ffbd2e;
  }
  .maximize {
    background: #27c93f;
  }

  .title {
    color: var(--terminal-bright);
    font-size: 0.9em;
    border-bottom: 1px solid green;
    text-transform: uppercase;
  }

  .tab-title {
    color: var(--terminal-dim);
    font-size: 0.9em;
  }

  .terminal-container {
    position: relative;
    min-height: 300px;
    max-height: 80vh;
    cursor: text;
  }

  .terminal-content {
    position: relative;
    z-index: 2;
    padding: 1rem;
    min-height: 300px;
    max-height: 80vh;
    overflow-y: auto;
    background: transparent;
  }
</style>
