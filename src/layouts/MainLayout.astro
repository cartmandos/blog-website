---
import { ClientRouter } from "astro:transitions"
import Head from "@/components/BaseHead.astro"
import Menu from "@/components/Menu.astro"
import Footer from "@/components/Footer.astro"
import Header from "@/components/Header.astro"
import "../styles/global.css"

interface Props {
  title: string
  props?: Record<string, never>
}

const { title, ...props } = Astro.props
const currentPath = Astro.url.pathname
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <Head title={title} />
    <ClientRouter />
  </head>
  <body>
    <Header pageName="Home" currentPath={currentPath} />
    <Menu currentPath={currentPath} />
    <main>
      <slot />
    </main>
    <Footer />

    <script>
      // Theme definitions
      const THEMES = {
        DARK: {
          "--terminal-green": "#00ff00",
          "--terminal-dark": "#0a0a0a",
          "--terminal-bright": "#ffffff",
          "--terminal-dim": "#666666",
          "--terminal-header": "#1a1a1a",
          "--terminal-shadow": "rgba(0, 255, 0, 0.2)",
          "--terminal-output": "#cccccc",
        },
        LIGHT: {
          "--terminal-green": "#008800",
          "--terminal-dark": "#ffffff",
          "--terminal-bright": "#000000",
          "--terminal-dim": "#999999",
          "--terminal-header": "#f0f0f0",
          "--terminal-shadow": "rgba(0, 136, 0, 0.1)",
          "--terminal-output": "#333333",
        },
      }

      // Initialize theme from localStorage
      const savedTheme = localStorage.getItem("theme") || "dark"
      document.documentElement.classList.toggle("dark", savedTheme === "dark")

      // Theme controls
      const themeToggle = document.getElementById("theme-toggle")
      const focusToggle = document.getElementById("focus-toggle")
      const matrixAnimation = window.matrixAnimation

      if (themeToggle) {
        themeToggle.textContent = savedTheme === "dark" ? "🌙" : "☀️"

        themeToggle.addEventListener("click", () => {
          const isDark = document.documentElement.classList.toggle("dark")
          themeToggle.textContent = isDark ? "🌙" : "☀️"
          localStorage.setItem("theme", isDark ? "dark" : "light")

          const theme = isDark ? THEMES.DARK : THEMES.LIGHT
          Object.entries(theme).forEach(([key, value]) => {
            document.documentElement.style.setProperty(key, value)
          })
        })
      }

      // Focus mode
      let isFocused = false
      if (focusToggle && matrixAnimation) {
        focusToggle.addEventListener("click", () => {
          isFocused = !isFocused
          matrixAnimation.setOpacity(isFocused ? 0.05 : 0.2)
          focusToggle.textContent = isFocused ? "👁️‍🗨️" : "👁️"
        })
      }

      // Keyboard shortcuts
      document.addEventListener("keydown", (e) => {
        // Ctrl/Cmd + Shift + L: Toggle theme
        if (e.key === "L" && (e.ctrlKey || e.metaKey) && e.shiftKey) {
          e.preventDefault()
          themeToggle?.click()
        }

        // Ctrl/Cmd + Shift + F: Toggle focus mode
        if (e.key === "F" && (e.ctrlKey || e.metaKey) && e.shiftKey) {
          e.preventDefault()
          focusToggle?.click()
        }
      })
    </script>
  </body>
</html>

<style is:global>
  :root {
    /* Default dark theme values */
    --terminal-green: #00ff00;
    --terminal-dark: #0a0a0a;
    --terminal-bright: #ffffff;
    --terminal-dim: #666666;
    --terminal-header: #1a1a1a;
    --terminal-shadow: rgba(0, 255, 0, 0.2);
    --terminal-output: #cccccc;
    --cursor-blink-speed: 1s;
    --font-mono: "Fira Code", monospace;
  }

  /* Theme transitions */
  html {
    transition:
      color 0.3s ease,
      background-color 0.3s ease;
  }

  html.dark {
    color-scheme: dark;
  }

  body {
    margin-bottom: 0;
    min-height: 100vh;
    /* padding: 2rem; */
    background: var(--terminal-dark);
    color: var(--terminal-green);
    font-family: var(--font-mono);
  }

  .bg-terminal-header {
    background-color: var(--terminal-header);
  }

  .text-terminal-green {
    color: var(--terminal-green);
  }

  .border-terminal-green {
    border-color: var(--terminal-green);
  }
</style>
